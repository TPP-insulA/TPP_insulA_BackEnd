datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  firstName     String
  lastName      String
  password      String
  birthDay      Int
  birthMonth    Int
  birthYear     Int
  weight        Float
  height        Float
  glucoseProfile String    // 'hypo' | 'normal' | 'hyper'
  profileImage  String?    // URL de la imagen de perfil
  diabetesType  String    @default("type1") // Only Type 1 Diabetes
  diagnosisDate DateTime  @default(now())
  treatingDoctor String?
  glucoseTarget GlucoseTarget?
  readings      GlucoseReading[]
  activities    Activity[]
  insulinDoses  InsulinDose[]
  insulinCalculations InsulinCalculation[]
  insulinSettings InsulinSettings?
  meals         Meal[]     
  insulinPredictions InsulinPrediction[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model GlucoseTarget {
  id          String   @id @default(uuid())
  minTarget   Float
  maxTarget   Float
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
}

model GlucoseReading {
  id        String   @id @default(uuid())
  value     Float
  timestamp DateTime @default(now())
  notes     String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Activity {
  id        String   @id @default(uuid())
  type      String   // 'glucose' | 'meal' | 'insulin'
  value     Float?
  mealType  String?
  carbs     Float?
  units     Float?
  notes     String?
  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model InsulinDose {
  id          String   @id @default(uuid())
  units       Float
  type        String    // 'rapid' | 'long'
  glucoseLevel Float?
  carbIntake   Float?
  notes       String?
  timestamp   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
}

model InsulinCalculation {
  id              String   @id @default(uuid())
  userId          String
  timestamp       DateTime @default(now())
  currentGlucose  Float
  carbs           Float
  activity        String
  timeOfDay       String
  total           Float
  correctionDose  Float
  mealDose        Float
  activityAdjustment Float
  timeAdjustment    Float
  resultingGlucose  Float?
  accuracy         String?  // 'Accurate' | 'Slightly low' | 'Low'
  user            User     @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
}

model InsulinSettings {
  id              String   @id @default(uuid())
  userId          String   @unique
  carbRatio       Float    // grams per unit
  correctionFactor Float   // mg/dL per unit
  targetGlucoseMin Float
  targetGlucoseMax Float
  activeInsulinDuration Float // hours
  user            User     @relation(fields: [userId], references: [id])
}

model Meal {
  id            String     @id @default(uuid())
  name          String
  description   String?
  type          MealType
  carbs         Float     @map("totalCarbs")
  protein       Float     @map("totalProtein")
  fat           Float     @map("totalFat") 
  calories      Float     @map("totalCalories")
  photo         String?
  timestamp     DateTime   @default(now())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  mealFoods     MealFood[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Food {
  id          String     @id @default(uuid())
  name        String
  carbs       Float
  protein     Float
  fat         Float
  calories    Float
  servingSize Float
  photo       String?
  meals       MealFood[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model MealFood {
  id       String   @id @default(uuid())
  mealId   String
  foodId   String
  quantity Float    @default(1)
  meal     Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
  food     Food     @relation(fields: [foodId], references: [id])
}

model InsulinPrediction {
  id              String   @id @default(uuid())
  date            DateTime
  cgmPrev         Float[]
  glucoseObjective Float
  carbs           Float
  insulinOnBoard  Float
  sleepLevel      Float
  workLevel       Float
  activityLevel   Float
  recommendedDose Float
  applyDose       Float?
  cgmPost         Float[]
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum MealType {
  breakfast
  lunch
  snack
  dinner
}